name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest kafka-python requests pyspark==3.5.0 pytest-cov

    - name: Run tests with coverage
      run: |
        PYTHONPATH=. pytest tests/ -v --cov=producer --cov=streaming_pipeline --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: tragiang/weather-pipeline:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: self-hosted  # Thay ubuntu-latest để dùng local Minikube (nếu self-hosted runner)
    if: github.ref == 'refs/heads/main'  # Comment if để disable tạm

    steps:
    - uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubeconfig
      run: |
        # Minikube local: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        # GKE: gcloud container clusters get-credentials cluster-name --zone zone --project project
        echo "Kubeconfig setup complete"

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Fix Terraform Provider Permissions
      run: |
        find .terraform/providers -name terraform-provider* -type f -exec chmod +x {} \;

    - name: Terraform Plan
      run: terraform plan -var="image_tag=latest" -var="docker_image=tragiang/weather-pipeline:latest"

    - name: Terraform Apply
      run: terraform apply -auto-approve -var="image_tag=latest" -var="docker_image=tragiang/weather-pipeline:latest"

    - name: Verify deployment
      run: |
        kubectl wait --for=condition=Available deployment/weather-pipeline --timeout=300s -n weather
        kubectl logs deployment/weather-pipeline -n weather --tail=10