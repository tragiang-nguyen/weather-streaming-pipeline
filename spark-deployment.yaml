apiVersion: v1
kind: Namespace
metadata:
  name: weather-pipeline
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: weather-pipeline
data:
  postgresql.conf: |
    listen_addresses = '*'
  pg_hba.conf: |
    host all all 0.0.0.0/0 trust
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: weather-pipeline
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: weather-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: wurstmeister/zookeeper
        ports:
          - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: weather-pipeline
spec:
  ports:
  - port: 2181
    targetPort: 2181
  selector:
    app: zookeeper
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: weather-pipeline
spec:
  serviceName: kafka-service
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: wurstmeister/kafka
        env:
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://kafka-service.weather-pipeline.svc.cluster.local:9092
        - name: KAFKA_LISTENERS
          value: PLAINTEXT://0.0.0.0:9092
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper-service:2181
        ports:
          - containerPort: 9092
        volumeMounts:
          - name: kafka-storage
            mountPath: /kafka
  volumeClaimTemplates:
  - metadata:
      name: kafka-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: weather-pipeline
spec:
  type: ClusterIP
  ports:
  - port: 9092
    targetPort: 9092
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: producer
  namespace: weather-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: producer
  template:
    metadata:
      labels:
        app: producer
    spec:
      initContainers:
      - name: wait-for-kafka
        image: debian:latest
        command: ['sh', '-c', 'apt-get update && apt-get install -y netcat-openbsd && until nc -zv kafka-service 9092; do echo waiting for kafka; sleep 2; done;']
      containers:
      - name: producer
        image: tragiang/producer-image:latest
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: weather-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_DB
          value: weather_db
        - name: POSTGRES_HOST_AUTH_METHOD
          value: trust
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: weather-pipeline
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark
  namespace: weather-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spark
  template:
    metadata:
      labels:
        app: spark
    spec:
      initContainers:
      - name: wait-for-kafka
        image: debian:latest
        command: ['sh', '-c', 'apt-get update && apt-get install -y netcat-openbsd && until nc -zv kafka-service 9092; do echo waiting for kafka; sleep 2; done;']
      containers:
      - name: spark
        image: tragiang/producer-image:latest
        command: ["spark-submit", "--master", "local[*]", "/opt/spark/work-dir/streaming_pipeline.py"]
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        - name: JDBC_URL
          value: jdbc:postgresql://postgres-service:5432/weather_db
        - name: JDBC_USER
          value: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: spark-pipeline-service
  namespace: weather-pipeline
spec:
  selector:
    app: spark
  ports:
    - protocol: TCP
      port: 4040
      targetPort: 4040
  type: NodePort